{"ast":null,"code":"'use strict';\n\nconst Helper = require('./helper.js');\n\nconst Geocoder = require('./geocoder.js');\n\nconst HttpAdapter = require('./httpadapter/httpadapter.js');\n\nconst HttpsAdapter = require('./httpadapter/httpsadapter.js');\n\nconst RequestAdapter = require('./httpadapter/requestadapter.js');\n\nconst FetchAdapter = require('./httpadapter/fetchadapter.js');\n\nconst GoogleGeocoder = require('./geocoder/googlegeocoder.js');\n\nconst HereGeocoder = require('./geocoder/heregeocoder.js');\n\nconst AGOLGeocoder = require('./geocoder/agolgeocoder.js');\n\nconst FreegeoipGeocoder = require('./geocoder/freegeoipgeocoder.js');\n\nconst DataScienceToolkitGeocoder = require('./geocoder/datasciencetoolkitgeocoder.js');\n\nconst OpenStreetMapGeocoder = require('./geocoder/openstreetmapgeocoder.js');\n\nconst PickPointGeocoder = require('./geocoder/pickpointgeocoder.js');\n\nconst LocationIQGeocoder = require('./geocoder/locationiqgeocoder.js');\n\nconst MapQuestGeocoder = require('./geocoder/mapquestgeocoder.js');\n\nconst MapzenGeocoder = require('./geocoder/mapzengeocoder.js');\n\nconst OpenMapQuestGeocoder = require('./geocoder/openmapquestgeocoder.js');\n\nconst YandexGeocoder = require('./geocoder/yandexgeocoder.js');\n\nconst GeocodioGeocoder = require('./geocoder/geocodiogeocoder.js');\n\nconst OpenCageGeocoder = require('./geocoder/opencagegeocoder.js');\n\nconst NominatimMapquestGeocoder = require('./geocoder/nominatimmapquestgeocoder.js');\n\nconst TomTomGeocoder = require('./geocoder/tomtomgeocoder.js');\n\nconst VirtualEarthGeocoder = require('./geocoder/virtualearth.js');\n\nconst SmartyStreets = require('./geocoder/smartystreetsgeocoder.js');\n\nconst TeleportGeocoder = require('./geocoder/teleportgeocoder.js');\n\nconst OpendataFranceGeocoder = require('./geocoder/opendatafrancegeocoder.js');\n\nconst MapBoxGeocoder = require('./geocoder/mapboxgeocoder.js');\n/**\n * Geocoder Facotry\n */\n\n\nconst GeocoderFactory = {\n  /**\n   * Return an http adapter by name\n   * @param  <string> adapterName adapter name\n   * @return <object>\n   */\n  _getHttpAdapter: function (adapterName, options) {\n    if (adapterName === 'http') {\n      return new HttpAdapter(null, options);\n    }\n\n    if (adapterName === 'https') {\n      return new HttpsAdapter(null, options);\n    }\n\n    if (adapterName === 'request') {\n      return new RequestAdapter(null, options);\n    }\n\n    if (adapterName === 'fetch') {\n      return new FetchAdapter(options);\n    }\n  },\n\n  /**\n   * Return a geocoder adapter by name\n   * @param  <string> adapterName adapter name\n   * @return <object>\n   */\n  _getGeocoder: function (geocoderName, adapter, extra) {\n    if (geocoderName === 'google') {\n      return new GoogleGeocoder(adapter, {\n        clientId: extra.clientId,\n        apiKey: extra.apiKey,\n        language: extra.language,\n        region: extra.region,\n        excludePartialMatches: extra.excludePartialMatches,\n        channel: extra.channel\n      });\n    }\n\n    if (geocoderName === 'here') {\n      return new HereGeocoder(adapter, {\n        apiKey: extra.apiKey,\n        appId: extra.appId,\n        appCode: extra.appCode,\n        language: extra.language,\n        politicalView: extra.politicalView,\n        country: extra.country,\n        state: extra.state,\n        production: extra.production,\n        limit: extra.limit\n      });\n    }\n\n    if (geocoderName === 'agol') {\n      return new AGOLGeocoder(adapter, {\n        client_id: extra.client_id,\n        client_secret: extra.client_secret\n      });\n    }\n\n    if (geocoderName === 'freegeoip') {\n      return new FreegeoipGeocoder(adapter);\n    }\n\n    if (geocoderName === 'datasciencetoolkit') {\n      return new DataScienceToolkitGeocoder(adapter, {\n        host: extra.host\n      });\n    }\n\n    if (geocoderName === 'openstreetmap') {\n      return new OpenStreetMapGeocoder(adapter, {\n        language: extra.language,\n        osmServer: extra.osmServer\n      });\n    }\n\n    if (geocoderName === 'pickpoint') {\n      return new PickPointGeocoder(adapter, {\n        language: extra.language,\n        apiKey: extra.apiKey\n      });\n    }\n\n    if (geocoderName === 'locationiq') {\n      return new LocationIQGeocoder(adapter, extra.apiKey);\n    }\n\n    if (geocoderName === 'mapquest') {\n      return new MapQuestGeocoder(adapter, extra.apiKey);\n    }\n\n    if (geocoderName === 'mapzen') {\n      return new MapzenGeocoder(adapter, extra.apiKey);\n    }\n\n    if (geocoderName === 'openmapquest') {\n      return new OpenMapQuestGeocoder(adapter, extra.apiKey);\n    }\n\n    if (geocoderName === 'yandex') {\n      return new YandexGeocoder(adapter, {\n        apiKey: extra.apiKey,\n        language: extra.language,\n        results: extra.results,\n        skip: extra.skip,\n        kind: extra.kind,\n        bbox: extra.bbox,\n        rspn: extra.rspn\n      });\n    }\n\n    if (geocoderName === 'geocodio') {\n      return new GeocodioGeocoder(adapter, extra.apiKey);\n    }\n\n    if (geocoderName === 'opencage') {\n      return new OpenCageGeocoder(adapter, extra.apiKey, extra);\n    }\n\n    if (geocoderName === 'nominatimmapquest') {\n      return new NominatimMapquestGeocoder(adapter, {\n        language: extra.language,\n        apiKey: extra.apiKey\n      });\n    }\n\n    if (geocoderName === 'tomtom') {\n      return new TomTomGeocoder(adapter, {\n        apiKey: extra.apiKey,\n        country: extra.country,\n        limit: extra.limit\n      });\n    }\n\n    if (geocoderName === 'virtualearth') {\n      return new VirtualEarthGeocoder(adapter, {\n        apiKey: extra.apiKey\n      });\n    }\n\n    if (geocoderName === 'smartystreets') {\n      return new SmartyStreets(adapter, extra.auth_id, extra.auth_token);\n    }\n\n    if (geocoderName === 'teleport') {\n      return new TeleportGeocoder(adapter, extra.apiKey, extra);\n    }\n\n    if (geocoderName === 'opendatafrance') {\n      return new OpendataFranceGeocoder(adapter);\n    }\n\n    if (geocoderName === 'mapbox') {\n      return new MapBoxGeocoder(adapter, extra);\n    }\n\n    throw new Error('No geocoder provider find for : ' + geocoderName);\n  },\n\n  /**\n   * Return an formatter adapter by name\n   * @param  <string> adapterName adapter name\n   * @return <object>\n   */\n  _getFormatter: function (formatterName, extra) {\n    if (formatterName === 'gpx') {\n      var GpxFormatter = require('./formatter/gpxformatter.js');\n\n      return new GpxFormatter();\n    }\n\n    if (formatterName === 'string') {\n      var StringFormatter = require('./formatter/stringformatter.js');\n\n      return new StringFormatter(extra.formatterPattern);\n    }\n  },\n\n  /**\n   * Return a geocoder\n   * @param  <string|object> geocoderAdapter Geocoder adapter name or adapter object\n   * @param  <string|object> httpAdapter     Http adapter name or adapter object\n   * @param  <array>         extra           Extra parameters array\n   * @return <object>\n   */\n  getGeocoder: function (geocoderAdapter, httpAdapter, extra) {\n    if (typeof geocoderAdapter === 'object') {\n      extra = geocoderAdapter;\n      geocoderAdapter = null;\n      httpAdapter = null;\n    }\n\n    if (!extra) {\n      extra = {};\n    }\n\n    if (extra.httpAdapter) {\n      httpAdapter = extra.httpAdapter;\n    }\n\n    if (extra.provider) {\n      geocoderAdapter = extra.provider;\n    }\n\n    if (!httpAdapter) {\n      httpAdapter = 'fetch';\n    }\n\n    if (!geocoderAdapter) {\n      geocoderAdapter = 'google';\n    }\n\n    if (Helper.isString(httpAdapter)) {\n      httpAdapter = this._getHttpAdapter(httpAdapter, extra);\n    }\n\n    if (Helper.isString(geocoderAdapter)) {\n      geocoderAdapter = this._getGeocoder(geocoderAdapter, httpAdapter, extra);\n    }\n\n    var formatter = extra.formatter;\n\n    if (Helper.isString(formatter)) {\n      formatter = this._getFormatter(formatter, extra);\n    }\n\n    return new Geocoder(geocoderAdapter, formatter);\n  }\n};\nmodule.exports = GeocoderFactory;","map":null,"metadata":{},"sourceType":"script"}