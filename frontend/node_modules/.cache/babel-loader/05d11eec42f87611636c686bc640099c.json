{"ast":null,"code":"var util = require('util');\n\nvar AbstractGeocoder = require('./abstractgeocoder');\n/**\n * Constructor\n * @param <object> httpAdapter Http Adapter\n * @param <object> options     Options (language, clientId, apiKey)\n */\n\n\nvar TomTomGeocoder = function TomTomGeocoder(httpAdapter, options) {\n  TomTomGeocoder.super_.call(this, httpAdapter, options);\n\n  if (!this.options.apiKey || this.options.apiKey == 'undefined') {\n    throw new Error('You must specify an apiKey');\n  }\n};\n\nutil.inherits(TomTomGeocoder, AbstractGeocoder); // TomTom geocoding API endpoint\n\nTomTomGeocoder.prototype._endpoint = 'https://api.tomtom.com/search/2/geocode';\nTomTomGeocoder.prototype._batchGeocodingEndpoint = 'https://api.tomtom.com/search/2/batch.json';\n/**\n * Geocode\n * @param <string>   value    Value to geocode (Address)\n * @param <function> callback Callback method\n */\n\nTomTomGeocoder.prototype._geocode = function (value, callback) {\n  var _this = this;\n\n  var params = {\n    key: this.options.apiKey\n  };\n\n  if (this.options.language) {\n    params.language = this.options.language;\n  }\n\n  if (this.options.country) {\n    params.countrySet = this.options.country;\n  }\n\n  var url = this._endpoint + '/' + encodeURIComponent(value) + '.json';\n  this.httpAdapter.get(url, params, function (err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      var results = [];\n\n      for (var i = 0; i < result.results.length; i++) {\n        results.push(_this._formatResult(result.results[i]));\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\nTomTomGeocoder.prototype._formatResult = function (result) {\n  return {\n    latitude: result.position.lat,\n    longitude: result.position.lon,\n    country: result.address.country,\n    city: result.address.localName,\n    state: result.address.countrySubdivision,\n    zipcode: result.address.postcode,\n    streetName: result.address.streetName,\n    streetNumber: result.address.streetNumber,\n    countryCode: result.address.countryCode\n  };\n};\n/**\n * Batch Geocode\n * @param <string[]>   values    Valueas to geocode\n * @param <function> callback Callback method\n */\n\n\nTomTomGeocoder.prototype._batchGeocode = async function (values, callback) {\n  try {\n    const jobLocation = await this.__createJob(values);\n    const rawResults = await this.__pollJobStatusAndFetchResults(jobLocation, values);\n\n    const parsedResults = this.__parseBatchResults(rawResults);\n\n    callback(false, parsedResults);\n  } catch (e) {\n    callback(e, null);\n  }\n};\n\nTomTomGeocoder.prototype.__createJob = async function (addresses) {\n  const body = {\n    batchItems: addresses.map(address => {\n      let query = `/geocode/${encodeURIComponent(address)}.json`;\n      const queryString = new URLSearchParams();\n\n      if (this.options.country) {\n        queryString.append('countrySet', this.options.country);\n      }\n\n      if (this.options.limit) {\n        queryString.append('limit', this.options.limit);\n      }\n\n      if (queryString.toString()) {\n        query += `?${queryString.toString()}`;\n      }\n\n      return {\n        query\n      };\n    })\n  };\n  const params = {\n    key: this.options.apiKey,\n    waitTimeSeconds: 10\n  };\n  const options = {\n    headers: {\n      'content-type': 'application/json',\n      accept: 'application/json'\n    },\n    redirect: 'manual',\n    body: JSON.stringify(body)\n  };\n  const response = await new Promise((resolve, reject) => {\n    this.httpAdapter.post(this._batchGeocodingEndpoint, params, options, function (err, result) {\n      if (err) {\n        return reject(err);\n      }\n\n      resolve(result);\n    });\n  });\n\n  if (response.status !== 303) {\n    const responseContentType = response.headers.get('Content-Type');\n\n    if (responseContentType && responseContentType.includes('application/json')) {\n      const errorBody = await response.json();\n      throw new Error(errorBody.error.description);\n    } else {\n      throw new Error(await response.text());\n    }\n  }\n\n  const location = response.headers.get('Location');\n\n  if (!location) {\n    throw new Error('Location header not found');\n  }\n\n  return location;\n};\n\nTomTomGeocoder.prototype.__pollJobStatusAndFetchResults = async function (location, addresses) {\n  let results;\n  let stalledResponsesLeft = 84;\n\n  for (; !results && stalledResponsesLeft > 0; stalledResponsesLeft -= 1) {\n    let newLocation = location;\n    const status = await new Promise((resolve, reject) => {\n      this.httpAdapter.get(newLocation, {}, function (err, res) {\n        if (err) {\n          return reject(err);\n        }\n\n        resolve(res);\n      }, true);\n    });\n\n    if (status.status === 200) {\n      results = await status.json();\n    } else if (status.status === 202) {\n      newLocation = status.headers.get('Location');\n\n      if (!newLocation) {\n        throw new Error('Location header not found');\n      }\n    } else if (status.status === 429) {\n      throw new Error('Provider error: Too many requests');\n    } else {\n      throw new Error(`Unexpected status: ${status.status}`);\n    }\n  }\n\n  if (!results) {\n    throw new Error('Long poll ended without results after 14 minutes');\n  }\n\n  if (!results.batchItems || results.batchItems.length !== addresses.length) {\n    throw new Error('Batch items length mismatch');\n  }\n\n  return results;\n};\n\nTomTomGeocoder.prototype.__parseBatchResults = function (rawResults) {\n  return rawResults.batchItems.map(result => {\n    if (result.statusCode !== 200) {\n      return {\n        error: `statusCode: ${result.statusCode}`,\n        value: []\n      };\n    }\n\n    return {\n      error: null,\n      value: result.response.results.map(value => ({ ...this._formatResult(value),\n        provider: 'tomtom'\n      }))\n    };\n  });\n};\n\nmodule.exports = TomTomGeocoder;","map":null,"metadata":{},"sourceType":"script"}