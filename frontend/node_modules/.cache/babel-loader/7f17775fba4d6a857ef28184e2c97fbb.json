{"ast":null,"code":"'use strict';\n\nvar net = require('net');\n\nvar ValueError = require('../error/valueerror.js');\n\nfunction formatGeocoderName(name) {\n  return name.toLowerCase().replace(/geocoder$/, '');\n}\n/**\n * AbstractGeocoder Constructor\n * @param <object> httpAdapter Http Adapter\n * @param <object> options     Options\n */\n\n\nvar AbstractGeocoder = function (httpAdapter, options) {\n  if (!this.constructor.name) {\n    throw new Error('The Constructor must be named');\n  }\n\n  this.name = formatGeocoderName(this.constructor.name);\n\n  if (!httpAdapter || httpAdapter == 'undefined') {\n    throw new Error(this.constructor.name + ' need an httpAdapter');\n  }\n\n  this.httpAdapter = httpAdapter;\n\n  if (!options || options == 'undefined') {\n    options = {};\n  }\n\n  if (this.options) {\n    this.options.forEach(function (option) {\n      if (!options[option] || options[option] == 'undefined') {\n        options[option] = null;\n      }\n    });\n  }\n\n  this.options = options;\n};\n/**\n * Reverse geocoding\n * @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n * @param <function> callback Callback method\n */\n\n\nAbstractGeocoder.prototype.reverse = function (query, callback) {\n  if (typeof this._reverse != 'function') {\n    throw new Error(this.constructor.name + ' no support reverse geocoding');\n  }\n\n  return this._reverse(query, callback);\n};\n/**\n * Geocode\n * @param <string>   value    Value to geocode\n * @param <function> callback Callback method\n */\n\n\nAbstractGeocoder.prototype.geocode = function (value, callback) {\n  var address = value;\n\n  if (typeof value === 'object') {\n    address = value.address;\n  }\n\n  if (typeof this._geocode != 'function') {\n    throw new ValueError(this.constructor.name + ' does not support geocoding');\n  }\n\n  if (net.isIPv4(address) && (!this.supportIPv4 || this.supportIPv4 == 'undefined')) {\n    throw new ValueError(this.constructor.name + ' does not support geocoding IPv4');\n  }\n\n  if (net.isIPv6(address) && (!this.supportIPv6 || this.supportIPv6 == 'undefined')) {\n    throw new ValueError(this.constructor.name + ' does not support geocoding IPv6');\n  }\n\n  if (this.supportAddress === false && !net.isIPv4(address) && !net.isIPv6(address)) {\n    throw new ValueError(this.constructor.name + ' does not support geocoding address');\n  }\n\n  return this._geocode(value, callback);\n};\n/**\n * Batch Geocode\n * @param <string[]>   values    Valueas to geocode\n * @param <function> callback Callback method\n */\n\n\nAbstractGeocoder.prototype.batchGeocode = function (values, callback) {\n  if (typeof this._batchGeocode === 'function') {\n    this._batchGeocode(values, callback);\n  } else {\n    Promise.all(values.map(value => new Promise(resolve => {\n      this.geocode(value, (error, value) => {\n        resolve({\n          error,\n          value\n        });\n      });\n    }))).then(data => callback(null, data));\n  }\n};\n\nmodule.exports = AbstractGeocoder;","map":null,"metadata":{},"sourceType":"script"}