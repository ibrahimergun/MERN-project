{"ast":null,"code":"'use strict';\n\nvar HttpError = require('../error/httperror.js');\n\nvar request = require('request-promise');\n/**\n* RequestAdapter\n* @param <object>   http      an optional http instance to use\n* @param <object>   options   additional options to set on the request\n*/\n\n\nvar RequestAdapter = function (request, options) {\n  this.options = options;\n};\n\nRequestAdapter.prototype.supportsHttps = function () {\n  return true;\n};\n/**\n* get\n* @param <string>   uri      Webservice url\n* @param <array>    params   array of query string parameters\n* @param <function> callback Callback method\n*/\n\n\nRequestAdapter.prototype.get = function (url, params, callback) {\n  var options = {\n    uri: url,\n    qs: params,\n    headers: {\n      'user-agent': 'Mozilla/5.0 (X11; Linux i586; rv:31.0) Gecko/20100101 Firefox/31.0'\n    },\n    resolveWithFullResponse: true,\n    json: true\n  };\n\n  if (this.options) {\n    for (var k in this.options) {\n      var v = this.options[k];\n\n      if (!v) {\n        continue;\n      }\n\n      options[k] = v;\n    }\n  }\n\n  return request(options).then(function handleResponse(response) {\n    return response.body;\n  }).catch(function (error) {\n    var _error = error.cause ? error.cause : error;\n\n    throw new HttpError(_error.message, {\n      code: _error.code\n    });\n  }).asCallback(callback);\n};\n\nmodule.exports = RequestAdapter;","map":null,"metadata":{},"sourceType":"script"}