{"ast":null,"code":"var querystring = require('querystring'),\n    util = require('util'),\n    AbstractGeocoder = require('./abstractgeocoder');\n/**\n * Constructor\n *\n * Geocoder for LocationIQ\n * http://locationiq.org/#docs\n *\n * @param {[type]} httpAdapter [description]\n * @param {String} apiKey      [description]\n */\n\n\nvar LocationIQGeocoder = function LocationIQGeocoder(httpAdapter, apiKey) {\n  LocationIQGeocoder.super_.call(this, httpAdapter);\n\n  if (!apiKey || apiKey == 'undefined') {\n    throw new Error('LocationIQGeocoder needs an apiKey');\n  }\n\n  this.apiKey = querystring.unescape(apiKey);\n};\n\nutil.inherits(LocationIQGeocoder, AbstractGeocoder);\nLocationIQGeocoder.prototype._endpoint = 'http://locationiq.org/v1';\nLocationIQGeocoder.prototype._endpoint_reverse = 'http://osm1.unwiredlabs.com/locationiq/v1/reverse.php';\n/**\n * Geocode\n * @param  {string|object}   value\n *   Value to geocode (Adress String or parameters as specified over at\n *   http://locationiq.org/#docs)\n * @param  {Function} callback callback method\n */\n\nLocationIQGeocoder.prototype._geocode = function (value, callback) {\n  var params = this._getCommonParams();\n\n  if (typeof value === 'string') {\n    params.q = value;\n  } else {\n    for (var k in value) {\n      var v = value[k];\n\n      switch (k) {\n        default:\n          params[k] = v;\n          break;\n        // alias for postalcode\n\n        case 'zipcode':\n          params.postalcode = v;\n          break;\n        // alias for street\n\n        case 'address':\n          params.street = v;\n          break;\n      }\n    }\n  }\n\n  this._forceParams(params);\n\n  this.httpAdapter.get(this._endpoint + '/search.php', params, function (err, responseData) {\n    if (err) {\n      return callback(err);\n    } // when there’s no err thrown here the resulting array object always\n    // seemes to be defined but empty so no need to check for\n    // responseData.error for now\n    // add check if the array is not empty, as it returns an empty array from time to time\n\n\n    var results = [];\n\n    if (responseData.length && responseData.length > 0) {\n      results = responseData.map(this._formatResult).filter(function (result) {\n        return result.longitude && result.latitude;\n      });\n      results.raw = responseData;\n    }\n\n    callback(false, results);\n  }.bind(this));\n};\n/**\n * Reverse geocoding\n * @param  {lat:<number>,lon<number>}   query    lat: Latitude, lon: Longitutde and additional parameters as specified here: http://locationiq.org/#docs\n * @param  {Function} callback Callback method\n */\n\n\nLocationIQGeocoder.prototype._reverse = function (query, callback) {\n  var params = this._getCommonParams();\n\n  for (var k in query) {\n    var v = query[k];\n    params[k] = v;\n  }\n\n  this._forceParams(params);\n\n  this.httpAdapter.get(this._endpoint_reverse, params, function (err, responseData) {\n    if (err) {\n      return callback(err);\n    } // when there’s no err thrown here the resulting array object always\n    // seemes to be defined but empty so no need to check for\n    // responseData.error for now\n    // locationiq always seemes to answer with a single object instead\n    // of an array\n\n\n    var results = [responseData].map(this._formatResult).filter(function (result) {\n      return result.longitude && result.latitude;\n    });\n    results.raw = responseData;\n    callback(false, results);\n  }.bind(this));\n};\n\nLocationIQGeocoder.prototype._formatResult = function (result) {\n  // transform lat and lon to real floats\n  var transformedResult = {\n    'latitude': result.lat ? parseFloat(result.lat) : undefined,\n    'longitude': result.lon ? parseFloat(result.lon) : undefined\n  };\n\n  if (result.address) {\n    transformedResult.country = result.address.country;\n    transformedResult.country = result.address.country;\n    transformedResult.city = result.address.city || result.address.town || result.address.village || result.address.hamlet;\n    transformedResult.state = result.address.state;\n    transformedResult.zipcode = result.address.postcode;\n    transformedResult.streetName = result.address.road || result.address.cycleway;\n    transformedResult.streetNumber = result.address.house_number; // make sure countrycode is always uppercase to keep node-geocoder api formats\n\n    var countryCode = result.address.country_code;\n\n    if (countryCode) {\n      countryCode = countryCode.toUpperCase();\n    }\n\n    transformedResult.countryCode = countryCode;\n  }\n\n  return transformedResult;\n};\n/**\n* Prepare common params\n*\n* @return <Object> common params\n*/\n\n\nLocationIQGeocoder.prototype._getCommonParams = function () {\n  return {\n    'key': this.apiKey\n  };\n};\n/**\n * Adds parameters that are enforced\n *\n * @param  {object} params object containing the parameters\n */\n\n\nLocationIQGeocoder.prototype._forceParams = function (params) {\n  params.format = 'json';\n  params.addressdetails = '1';\n};\n\nmodule.exports = LocationIQGeocoder;","map":null,"metadata":{},"sourceType":"script"}