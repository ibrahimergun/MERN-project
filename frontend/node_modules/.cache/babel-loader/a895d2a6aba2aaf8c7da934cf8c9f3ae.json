{"ast":null,"code":"'use strict';\n\nvar BPromise = require('bluebird');\n/**\n* Constructor\n* @param <object> geocoder  Geocoder Adapter\n* @param <object> formatter Formatter adapter or null\n*/\n\n\nvar Geocoder = function (geocoder, formatter) {\n  this._geocoder = geocoder;\n  this._formatter = formatter;\n};\n/**\n* Geocode a value (address or ip)\n* @param <string>   value    Value to geocoder (address or IP)\n* @param <function> callback Callback method\n*/\n\n\nGeocoder.prototype.geocode = function (value, callback) {\n  return BPromise.resolve().bind(this).then(function () {\n    return BPromise.fromCallback(function (callback) {\n      this._geocoder.geocode(value, callback);\n    }.bind(this));\n  }).then(function (data) {\n    return this._filter(value, data);\n  }).then(function (data) {\n    return this._format(data);\n  }).asCallback(callback);\n};\n/**\n* Reverse geocoding\n* @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n* @param {function} callback Callback method\n*/\n\n\nGeocoder.prototype.reverse = function (query, callback) {\n  return BPromise.resolve().bind(this).then(function () {\n    return BPromise.fromCallback(function (callback) {\n      this._geocoder.reverse(query, callback);\n    }.bind(this));\n  }).then(function (data) {\n    return this._format(data);\n  }).asCallback(callback);\n};\n/**\n* Batch geocode\n* @param <array>    values    array of Values to geocode (address or IP)\n* @param <function> callback\n*\n* @return promise\n*/\n\n\nGeocoder.prototype.batchGeocode = function (values, callback) {\n  return BPromise.resolve().bind(this).then(function () {\n    return BPromise.fromCallback(function (callback) {\n      this._geocoder.batchGeocode(values, callback);\n    }.bind(this));\n  }).asCallback(callback);\n};\n\nGeocoder.prototype._filter = function (value, data) {\n  if (!data || !data.length) {\n    return data;\n  }\n\n  if (value.minConfidence) {\n    data = data.filter(function (geocodedAddress) {\n      if (geocodedAddress.extra && geocodedAddress.extra.confidence) {\n        return geocodedAddress.extra.confidence >= value.minConfidence;\n      }\n    });\n  }\n\n  return data;\n};\n\nGeocoder.prototype._format = function (data) {\n  var _this = this;\n\n  return BPromise.resolve().bind(this).then(function () {\n    if (!data) {\n      return data;\n    }\n\n    var _raw = data.raw;\n    data = data.map(function (result) {\n      result.provider = _this._geocoder.name;\n      return result;\n    });\n    data.raw = _raw;\n    Object.defineProperty(data, 'raw', {\n      configurable: false,\n      enumerable: false,\n      writable: false\n    });\n    return data;\n  }).then(function (data) {\n    var _data = data;\n\n    if (this._formatter && this._formatter !== 'undefined') {\n      _data = this._formatter.format(_data);\n    }\n\n    return _data;\n  });\n};\n\nmodule.exports = Geocoder;","map":null,"metadata":{},"sourceType":"script"}