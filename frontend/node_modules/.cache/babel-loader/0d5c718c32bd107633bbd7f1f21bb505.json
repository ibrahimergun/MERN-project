{"ast":null,"code":"'use strict';\n\nvar HttpError = require('../error/httperror.js');\n\nvar querystring = require('querystring');\n/**\n* HttpAdapter\n* @param <object>   http      an optional http instance to use\n* @param <object>   options   additional options to set on the request\n*/\n\n\nvar HttpAdapter = function (http, options) {\n  if (!http || http === 'undefined') {\n    http = require('http');\n  }\n\n  this.url = require('url');\n  this.http = http;\n  this.options = options;\n};\n/**\n* Geocode\n* @param <string>   url      Webservice url\n* @param <array>    params   array of query string parameters\n* @param <function> callback Callback method\n*/\n\n\nHttpAdapter.prototype.get = function (url, params, callback) {\n  var urlParsed = this.url.parse(url);\n  var options = {\n    host: urlParsed.hostname,\n    path: urlParsed.path + '?' + querystring.stringify(params),\n    headers: {\n      'user-agent': 'Mozilla/5.0 (X11; Linux i586; rv:31.0) Gecko/20100101 Firefox/31.0'\n    }\n  };\n\n  if (urlParsed.port) {\n    options.port = urlParsed.port;\n  }\n\n  if (this.options) {\n    for (var k in this.options) {\n      var v = this.options[k];\n\n      if (!v) {\n        continue;\n      }\n\n      options[k] = v;\n    }\n  }\n\n  var request = this.http.request(options, function (response) {\n    var str = '';\n    var contentType = response.headers['content-type'];\n    response.on('data', function (chunk) {\n      str += chunk;\n    }); //the whole response has been recieved, so we just print it out here\n\n    response.on('end', function () {\n      if (response.statusCode !== 200) {\n        return callback(new Error('Response status code is ' + response.statusCode), null);\n      }\n\n      if (contentType !== undefined && contentType.indexOf('application/json') >= 0) {\n        callback(false, JSON.parse(str));\n      } else {\n        callback(false, str);\n      }\n    });\n  });\n\n  if (typeof options.timeout !== 'undefined') {\n    request.setTimeout(options.timeout);\n  }\n\n  var onError = function (err) {\n    var error = err instanceof HttpError ? err : new HttpError(err.message, {\n      code: err.code\n    });\n    callback(error, null);\n  };\n\n  request.on('error', onError);\n  request.on('timeout', function () {\n    onError(new HttpError('connect ETIMEDOUT', {\n      code: 'ETIMEDOUT',\n      errno: 'ETIMEDOUT',\n      syscall: 'connect'\n    }));\n  });\n  request.end();\n};\n\nHttpAdapter.prototype.supportsHttps = function () {\n  return false;\n};\n\nmodule.exports = HttpAdapter;","map":null,"metadata":{},"sourceType":"script"}