{"ast":null,"code":"var util = require('util'),\n    AbstractGeocoder = require('./abstractgeocoder');\n/**\n * Constructor\n */\n\n\nvar OpenStreetMapGeocoder = function OpenStreetMapGeocoder(httpAdapter, options) {\n  this.options = ['language', 'email', 'apiKey', 'osmServer'];\n  OpenStreetMapGeocoder.super_.call(this, httpAdapter, options);\n  var osmServer = options && options.osmServer || 'http://nominatim.openstreetmap.org';\n  OpenStreetMapGeocoder.prototype._endpoint = osmServer + '/search';\n  OpenStreetMapGeocoder.prototype._endpoint_reverse = osmServer + '/reverse';\n};\n\nutil.inherits(OpenStreetMapGeocoder, AbstractGeocoder);\nOpenStreetMapGeocoder.prototype._endpoint = 'https://nominatim.openstreetmap.org/search';\nOpenStreetMapGeocoder.prototype._endpoint_reverse = 'https://nominatim.openstreetmap.org/reverse';\n/**\n* Geocode\n* @param <string|object>   value    Value to geocode (Address or parameters, as specified at https://wiki.openstreetmap.org/wiki/Nominatim#Parameters)\n* @param <function> callback Callback method\n*/\n\nOpenStreetMapGeocoder.prototype._geocode = function (value, callback) {\n  var _this = this;\n\n  var params = this._getCommonParams();\n\n  params.addressdetails = 1;\n\n  if (typeof value == 'string') {\n    params.q = value;\n  } else {\n    for (var k in value) {\n      var v = value[k];\n      params[k] = v;\n    }\n  }\n\n  this._forceParams(params);\n\n  this.httpAdapter.get(this._endpoint, params, function (err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      var results = [];\n\n      if (result.error) {\n        return callback(new Error(result.error));\n      }\n\n      if (result instanceof Array) {\n        for (var i = 0; i < result.length; i++) {\n          results.push(_this._formatResult(result[i]));\n        }\n      } else {\n        results.push(_this._formatResult(result));\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n\nOpenStreetMapGeocoder.prototype._formatResult = function (result) {\n  var countryCode = result.address.country_code;\n\n  if (countryCode) {\n    countryCode = countryCode.toUpperCase();\n  }\n\n  var latitude = result.lat;\n\n  if (latitude) {\n    latitude = parseFloat(latitude);\n  }\n\n  var longitude = result.lon;\n\n  if (longitude) {\n    longitude = parseFloat(longitude);\n  }\n\n  return {\n    'latitude': latitude,\n    'longitude': longitude,\n    'formattedAddress': result.display_name,\n    'country': result.address.country,\n    'city': result.address.city || result.address.town || result.address.village || result.address.hamlet,\n    'state': result.address.state,\n    'zipcode': result.address.postcode,\n    'streetName': result.address.road || result.address.cycleway,\n    'streetNumber': result.address.house_number,\n    'countryCode': countryCode,\n    'neighbourhood': result.address.neighbourhood || ''\n  };\n};\n/**\n* Reverse geocoding\n* @param {lat:<number>,lon:<number>, ...}  lat: Latitude, lon: Longitude, ... see https://wiki.openstreetmap.org/wiki/Nominatim#Parameters_2\n* @param <function> callback Callback method\n*/\n\n\nOpenStreetMapGeocoder.prototype._reverse = function (query, callback) {\n  var _this = this;\n\n  var params = this._getCommonParams();\n\n  for (var k in query) {\n    var v = query[k];\n    params[k] = v;\n  }\n\n  this._forceParams(params);\n\n  this.httpAdapter.get(this._endpoint_reverse, params, function (err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      if (result.error) {\n        return callback(new Error(result.error));\n      }\n\n      var results = [];\n\n      if (result instanceof Array) {\n        for (var i = 0; i < result.length; i++) {\n          results.push(_this._formatResult(result[i]));\n        }\n      } else {\n        results.push(_this._formatResult(result));\n      }\n\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n/**\n* Prepare common params\n*\n* @return <Object> common params\n*/\n\n\nOpenStreetMapGeocoder.prototype._getCommonParams = function () {\n  var params = {};\n\n  for (var k in this.options) {\n    var v = this.options[k];\n\n    if (!v) {\n      continue;\n    }\n\n    if (k === 'language') {\n      k = 'accept-language';\n    }\n\n    params[k] = v;\n  }\n\n  return params;\n};\n\nOpenStreetMapGeocoder.prototype._forceParams = function (params) {\n  params.format = 'json';\n  params.addressdetails = 1;\n};\n\nmodule.exports = OpenStreetMapGeocoder;","map":null,"metadata":{},"sourceType":"script"}