{"ast":null,"code":"const AbstractGeocoder = require('./abstractgeocoder');\n/**\n * available options \n * @see https://docs.mapbox.com/api/search/geocoding/\n */\n\n\nconst OPTIONS = ['apiKey', 'language', 'country', 'autocomplete', 'bbox', 'fuzzyMatch', 'limit', 'proximity', 'routing'];\nconst OPTIONS_MAP = {\n  apiKey: 'access_token'\n};\n/**\n * Constructor\n * @param <object> httpAdapter Http Adapter\n * @param <object> options Options (apiKey, language, country, autocomplete, bbox, fuzzyMatch, limit, proximity, routing)\n */\n\nclass MapBoxGeocoder extends AbstractGeocoder {\n  constructor(httpAdapter, options) {\n    super(httpAdapter, options);\n    this.options = options || {}; // appId and appCode are deprecated\n\n    if (!this.options.apiKey) {\n      throw new Error('You must specify apiKey to use MapBox Geocoder');\n    }\n  }\n  /**\n   * Geocode\n   * @param <string>   value    Value to geocode (Address)\n   * @param <function> callback Callback method\n   */\n\n\n  _geocode(value, callback) {\n    let params = this._prepareQueryString({});\n\n    let searchtext = value;\n\n    if (value.address) {\n      params = this._prepareQueryString(value);\n      searchtext = value.address;\n    }\n\n    const endpoint = `${this._geocodeEndpoint}/${encodeURIComponent(searchtext)}.json`;\n    this.httpAdapter.get(endpoint, params, (err, result) => {\n      let results = [];\n      results.raw = result;\n\n      if (err) {\n        return callback(err, results);\n      } else {\n        const view = result.features;\n\n        if (!view) {\n          return callback(false, results);\n        }\n\n        results = view.map(this._formatResult);\n        results.raw = result;\n        callback(false, results);\n      }\n    });\n  }\n  /**\n   * Reverse geocoding\n   * @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n   * @param <function> callback Callback method\n   */\n\n\n  _reverse(query, callback) {\n    const {\n      lat,\n      lon,\n      ...other\n    } = query;\n\n    const params = this._prepareQueryString(other);\n\n    const endpoint = `${this._geocodeEndpoint}/${encodeURIComponent(`${lon},${lat}`)}.json`;\n    this.httpAdapter.get(endpoint, params, (err, result) => {\n      let results = [];\n      results.raw = result;\n\n      if (err) {\n        return callback(err, results);\n      } else {\n        const view = result.features;\n\n        if (!view) {\n          return callback(false, results);\n        }\n\n        results = view.map(this._formatResult);\n        results.raw = result;\n        callback(false, results);\n      }\n    });\n  }\n\n  _formatResult(result) {\n    const context = (result.context || []).reduce((o, item) => {\n      // possible types: country, region, postcode, district, place, locality, neighborhood, address\n      const [type] = item.id.split('.');\n\n      if (type) {\n        o[type] = item.text;\n\n        if (type === 'country' && item.short_code) {\n          o.countryCode = item.short_code.toUpperCase();\n        }\n      }\n\n      return o;\n    }, {}); // get main type\n\n    const [type] = result.id.split('.');\n\n    if (type) {\n      context[type] = result.text;\n    }\n\n    const properties = result.properties || {};\n    const extractedObj = {\n      latitude: result.center[1],\n      longitude: result.center[0],\n      formattedAddress: result.place_name,\n      country: context.country,\n      countryCode: context.countryCode,\n      state: context.region,\n      district: context.district,\n      city: context.place,\n      zipcode: context.postcode,\n      neighbourhood: context.neighborhood || context.locality,\n      extra: {\n        id: result.id,\n        address: properties.address || context.address,\n        category: properties.category,\n        bbox: result.bbox\n      }\n    };\n    return extractedObj;\n  }\n\n  _prepareQueryString(params) {\n    OPTIONS.forEach(key => {\n      const val = this.options[key];\n\n      if (val) {\n        const _key = OPTIONS_MAP[key] || key;\n\n        params[_key] = val;\n      }\n    });\n    return params;\n  }\n\n}\n\nObject.defineProperties(MapBoxGeocoder.prototype, {\n  _geocodeEndpoint: {\n    get: function () {\n      return 'https://api.mapbox.com/geocoding/v5/mapbox.places';\n    }\n  }\n});\nmodule.exports = MapBoxGeocoder;","map":null,"metadata":{},"sourceType":"script"}