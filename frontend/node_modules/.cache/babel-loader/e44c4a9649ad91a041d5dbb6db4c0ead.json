{"ast":null,"code":"'use strict';\n\nvar util = require('util');\n\nvar AbstractGeocoder = require('./abstractgeocoder');\n/**\n * Constructor\n * @param <object> httpAdapter Http Adapter\n * @param <object> options     Options (language, clientId, apiKey)\n */\n\n\nvar YandexGeocoder = function YandexGeocoder(httpAdapter, options) {\n  this.options = ['apiKey'];\n  YandexGeocoder.super_.call(this, httpAdapter, options);\n};\n\nutil.inherits(YandexGeocoder, AbstractGeocoder);\n\nfunction _findKey(result, wantedKey) {\n  var val = null;\n  Object.keys(result).every(function (key) {\n    if (key === wantedKey) {\n      val = result[key];\n      return false;\n    }\n\n    if (typeof result[key] === 'object') {\n      val = _findKey(result[key], wantedKey);\n      return val === null ? true : false;\n    }\n\n    return true;\n  });\n  return val;\n}\n\nfunction _formatResult(result) {\n  var position = result.GeoObject.Point.pos.split(' ');\n  result = result.GeoObject.metaDataProperty.GeocoderMetaData.AddressDetails;\n  return {\n    'latitude': parseFloat(position[1]),\n    'longitude': parseFloat(position[0]),\n    'city': _findKey(result, 'LocalityName'),\n    'state': _findKey(result, 'AdministrativeAreaName'),\n    'streetName': _findKey(result, 'ThoroughfareName'),\n    'streetNumber': _findKey(result, 'PremiseNumber'),\n    'countryCode': _findKey(result, 'CountryNameCode'),\n    'country': _findKey(result, 'CountryName'),\n    'formattedAddress': _findKey(result, 'AddressLine')\n  };\n}\n\nfunction _processOptionsToParams(params, options) {\n  //language (language_region, ex: `ru_RU`, `uk_UA`)\n  if (options.language) {\n    params.lang = options.language;\n  } //results count (default 10)\n\n\n  if (options.results) {\n    params.results = options.results;\n  } //skip count (default 0)\n\n\n  if (options.skip) {\n    params.skip = options.skip;\n  } //Type of toponym (only for reverse geocoding)\n  //could be `house`, `street`, `metro`, `district`, `locality`\n\n\n  if (options.kind) {\n    params.kind = options.kind;\n  } //BBox (ex: `[[lat: 1.0, lng:2.0],[lat: 1.1, lng:2.2]]`)\n\n\n  if (options.bbox) {\n    if (options.bbox.length === 2) {\n      params.bbox = options.bbox[0].lng + ',' + options.bbox[0].lat;\n      params.bbox = params.bbox + '~';\n      params.bbox = params.bbox + options.bbox[1].lng + ',' + options.bbox[1].lat;\n    }\n  } //Limit search in bbox (1) or not limit (0)\n\n\n  if (options.rspn) {\n    params.rspn = options.rspn;\n  }\n\n  if (options.apiKey) {\n    params.apikey = options.apiKey;\n  }\n} // Yandex geocoding API endpoint\n\n\nYandexGeocoder.prototype._endpoint = 'https://geocode-maps.yandex.ru/1.x/';\n/**\n* Geocode\n* @param <string>   value    Value to geocode (Address)\n* @param <function> callback Callback method\n*/\n\nYandexGeocoder.prototype._geocode = function (value, callback) {\n  var params = {\n    geocode: value,\n    format: 'json'\n  };\n\n  _processOptionsToParams(params, this.options);\n\n  this.httpAdapter.get(this._endpoint, params, function (err, result) {\n    if (err) {\n      return callback(err);\n    } else {\n      var results = [];\n      result.response.GeoObjectCollection.featureMember.forEach(function (geopoint) {\n        results.push(_formatResult(geopoint));\n      });\n      results.raw = result;\n      callback(false, results);\n    }\n  });\n};\n/**\n * Reverse geocoding\n * @param {lat:<number>,lon:<number>}  lat: Latitude, lon: Longitude\n * @param <function> callback Callback method\n */\n\n\nYandexGeocoder.prototype._reverse = function (query, callback) {\n  var lat = query.lat;\n  var lng = query.lon;\n  var value = lng + ',' + lat;\n\n  this._geocode(value, callback);\n};\n\nmodule.exports = YandexGeocoder;","map":null,"metadata":{},"sourceType":"script"}